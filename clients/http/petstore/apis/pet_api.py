# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: petstore
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from clients.http.petstore.models.api_models import (
    ApiResponse,
    Pet,
)


class PetApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def post_pet_pet_id_upload_image(
        self,
        pet_id: Any,
        **kwargs: Any,
    ) -> ApiResponse:
        """
        uploads an image.

        Args:
            pet_id(Any, required): ID of pet to update
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            ApiResponse: ...
        """  # noqa: D205,E501

        response = self.post_pet_pet_id_upload_image_with_http_info(
            pet_id=pet_id,
            **kwargs,
        )
        return ApiResponse.model_validate_json(response.text)

    def post_pet_pet_id_upload_image_with_http_info(
        self,
        pet_id: Any,
        **kwargs: Any,
    ) -> Response:
        """
        uploads an image.

        Args:
            pet_id(Any, required): ID of pet to update
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.post(
            url=f"/pet/{pet_id}/uploadImage",
            headers=headers,
            **kwargs,
        )
        return response

    def post_pet(
        self,
        pet: Pet,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Add a new pet to the store.

        Args:
            pet(Pet): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.post_pet_with_http_info(
            pet=pet,  # noqa: E501
            **kwargs,
        )
        return response

    def post_pet_with_http_info(
        self,
        pet: Pet,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Add a new pet to the store.

        Args:
            pet(Pet): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = pet.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/pet",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def put_pet(
        self,
        pet: Pet,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Update an existing pet.

        Args:
            pet(Pet): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.put_pet_with_http_info(
            pet=pet,  # noqa: E501
            **kwargs,
        )
        return response

    def put_pet_with_http_info(
        self,
        pet: Pet,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Update an existing pet.

        Args:
            pet(Pet): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = pet.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.put(
            url="/pet",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def get_pet_find_by_status(
        self,
        status: Any,
        **kwargs: Any,
    ) -> Response:
        """
                Finds Pets by status.

                Args:
                    status(Any, required): Status values that need to be considered for
        filter
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

                Returns:
                    None: ...
        """  # noqa: D205,E501

        response = self.get_pet_find_by_status_with_http_info(
            status=status,
            **kwargs,
        )
        return response

    def get_pet_find_by_status_with_http_info(
        self,
        status: Any,
        **kwargs: Any,
    ) -> Response:
        """
                Finds Pets by status.

                Args:
                    status(Any, required): Status values that need to be considered for
        filter
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "status": status,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/pet/findByStatus",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    def get_pet_find_by_tags(
        self,
        tags: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Finds Pets by tags.

        Args:
            tags(Any, required): Tags to filter by
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.get_pet_find_by_tags_with_http_info(
            tags=tags,
            **kwargs,
        )
        return response

    def get_pet_find_by_tags_with_http_info(
        self,
        tags: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Finds Pets by tags.

        Args:
            tags(Any, required): Tags to filter by
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "tags": tags,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/pet/findByTags",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    def get_pet_pet_id(
        self,
        pet_id: Any,
        **kwargs: Any,
    ) -> Pet:
        """
        Find pet by ID.

        Args:
            pet_id(Any, required): ID of pet to return
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Pet: ...
        """  # noqa: D205,E501

        response = self.get_pet_pet_id_with_http_info(
            pet_id=pet_id,
            **kwargs,
        )
        return Pet.model_validate_json(response.text)

    def get_pet_pet_id_with_http_info(
        self,
        pet_id: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Find pet by ID.

        Args:
            pet_id(Any, required): ID of pet to return
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url=f"/pet/{pet_id}",
            headers=headers,
            **kwargs,
        )
        return response

    def post_pet_pet_id(
        self,
        pet_id: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Updates a pet in the store with form data.

        Args:
            pet_id(Any, required): ID of pet that needs to be updated
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.post_pet_pet_id_with_http_info(
            pet_id=pet_id,
            **kwargs,
        )
        return response

    def post_pet_pet_id_with_http_info(
        self,
        pet_id: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Updates a pet in the store with form data.

        Args:
            pet_id(Any, required): ID of pet that needs to be updated
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.post(
            url=f"/pet/{pet_id}",
            headers=headers,
            **kwargs,
        )
        return response

    def delete_pet_pet_id(
        self,
        pet_id: Any,
        api_key: Any = None,
        **kwargs: Any,
    ) -> Response:
        """
        Deletes a pet.

        Args:
            pet_id(Any, required): Pet id to delete
            api_key(Any, optional): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.delete_pet_pet_id_with_http_info(
            pet_id=pet_id,
            api_key=api_key,
            **kwargs,
        )
        return response

    def delete_pet_pet_id_with_http_info(
        self,
        pet_id: Any,
        api_key: Any = None,
        **kwargs: Any,
    ) -> Response:
        """
        Deletes a pet.

        Args:
            pet_id(Any, required): Pet id to delete
            api_key(Any, optional): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "api_key": str(api_key),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = self.api_client.delete(
            url=f"/pet/{pet_id}",
            headers=headers,
            **kwargs,
        )
        return response
