# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: petstore
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from clients.http.petstore.models.api_models import (
    User,
)


class UserApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def post_user_create_with_list(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Creates list of users with given input array.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.post_user_create_with_list_with_http_info(
            **kwargs,
        )
        return response

    def post_user_create_with_list_with_http_info(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Creates list of users with given input array.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.post(
            url="/user/createWithList",
            headers=headers,
            **kwargs,
        )
        return response

    def get_user_username(
        self,
        username: Any,
        **kwargs: Any,
    ) -> User:
        """
                Get user by user name.

                Args:
                    username(Any, required): The name that needs to be fetched. Use user1 for
        testing.
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

                Returns:
                    User: ...
        """  # noqa: D205,E501

        response = self.get_user_username_with_http_info(
            username=username,
            **kwargs,
        )
        return User.model_validate_json(response.text)

    def get_user_username_with_http_info(
        self,
        username: Any,
        **kwargs: Any,
    ) -> Response:
        """
                Get user by user name.

                Args:
                    username(Any, required): The name that needs to be fetched. Use user1 for
        testing.
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url=f"/user/{username}",
            headers=headers,
            **kwargs,
        )
        return response

    def put_user_username(
        self,
        user: User,  # noqa: E501
        username: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Updated user.

        Args:
            user(User): ...
            username(Any, required): name that need to be updated
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.put_user_username_with_http_info(
            username=username,
            user=user,  # noqa: E501
            **kwargs,
        )
        return response

    def put_user_username_with_http_info(
        self,
        user: User,  # noqa: E501
        username: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Updated user.

        Args:
            user(User): ...
            username(Any, required): name that need to be updated
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = user.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.put(
            url=f"/user/{username}",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def delete_user_username(
        self,
        username: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Delete user.

        Args:
            username(Any, required): The name that needs to be deleted
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.delete_user_username_with_http_info(
            username=username,
            **kwargs,
        )
        return response

    def delete_user_username_with_http_info(
        self,
        username: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Delete user.

        Args:
            username(Any, required): The name that needs to be deleted
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.delete(
            url=f"/user/{username}",
            headers=headers,
            **kwargs,
        )
        return response

    def get_user_login(
        self,
        username: Any,
        password: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Logs user into the system.

        Args:
            username(Any, required): The user name for login
            password(Any, required): The password for login in clear text
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.get_user_login_with_http_info(
            username=username,
            password=password,
            **kwargs,
        )
        return response

    def get_user_login_with_http_info(
        self,
        username: Any,
        password: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Logs user into the system.

        Args:
            username(Any, required): The user name for login
            password(Any, required): The password for login in clear text
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "username": username,
            "password": password,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/user/login",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    def get_user_logout(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Logs out current logged in user session.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.get_user_logout_with_http_info(
            **kwargs,
        )
        return response

    def get_user_logout_with_http_info(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Logs out current logged in user session.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/user/logout",
            headers=headers,
            **kwargs,
        )
        return response

    def post_user_create_with_array(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Creates list of users with given input array.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.post_user_create_with_array_with_http_info(
            **kwargs,
        )
        return response

    def post_user_create_with_array_with_http_info(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Creates list of users with given input array.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.post(
            url="/user/createWithArray",
            headers=headers,
            **kwargs,
        )
        return response

    def post_user(
        self,
        user: User,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Create user.

        Args:
            user(User): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.post_user_with_http_info(
            user=user,  # noqa: E501
            **kwargs,
        )
        return response

    def post_user_with_http_info(
        self,
        user: User,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Create user.

        Args:
            user(User): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = user.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/user",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response
