# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: petstore
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from clients.http.petstore.models.api_models import (
    Order,
)


class StoreApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def get_store_inventory(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Returns pet inventories by status.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.get_store_inventory_with_http_info(
            **kwargs,
        )
        return response

    def get_store_inventory_with_http_info(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Returns pet inventories by status.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/store/inventory",
            headers=headers,
            **kwargs,
        )
        return response

    def post_store_order(
        self,
        order: Order,  # noqa: E501
        **kwargs: Any,
    ) -> Order:
        """
        Place an order for a pet.

        Args:
            order(Order): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Order: ...
        """  # noqa: D205,E501

        response = self.post_store_order_with_http_info(
            order=order,  # noqa: E501
            **kwargs,
        )
        return Order.model_validate_json(response.text)

    def post_store_order_with_http_info(
        self,
        order: Order,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Place an order for a pet.

        Args:
            order(Order): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = order.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/store/order",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def get_store_order_order_id(
        self,
        order_id: Any,
        **kwargs: Any,
    ) -> Order:
        """
        Find purchase order by ID.

        Args:
            order_id(Any, required): ID of pet that needs to be fetched
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Order: ...
        """  # noqa: D205,E501

        response = self.get_store_order_order_id_with_http_info(
            order_id=order_id,
            **kwargs,
        )
        return Order.model_validate_json(response.text)

    def get_store_order_order_id_with_http_info(
        self,
        order_id: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Find purchase order by ID.

        Args:
            order_id(Any, required): ID of pet that needs to be fetched
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url=f"/store/order/{order_id}",
            headers=headers,
            **kwargs,
        )
        return response

    def delete_store_order_order_id(
        self,
        order_id: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Delete purchase order by ID.

        Args:
            order_id(Any, required): ID of the order that needs to be deleted
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.delete_store_order_order_id_with_http_info(
            order_id=order_id,
            **kwargs,
        )
        return response

    def delete_store_order_order_id_with_http_info(
        self,
        order_id: Any,
        **kwargs: Any,
    ) -> Response:
        """
        Delete purchase order by ID.

        Args:
            order_id(Any, required): ID of the order that needs to be deleted
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.delete(
            url=f"/store/order/{order_id}",
            headers=headers,
            **kwargs,
        )
        return response
