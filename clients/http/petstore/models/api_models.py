"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: {{ service_name|to_snake_case }}
    version: {{ version }}

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Contact(BaseModel):
    email: str


class License(BaseModel):
    name: str
    url: str


class Info(BaseModel):
    description: str
    version: str
    title: str
    terms_of_service: str = Field(..., alias="termsOfService")
    contact: Contact
    license: License


class ExternalDocs(BaseModel):
    description: str
    url: str


class Tag(BaseModel):
    name: str
    description: str
    external_docs: Optional[ExternalDocs] = Field(None, alias="externalDocs")


class Parameter(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    format: Optional[str] = None


class Schema(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field200(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias="200")


class SecurityItem(BaseModel):
    petstore_auth: List[str]


class Post(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter]
    responses: Responses
    security: List[SecurityItem]


class FieldPetPetIdUploadImage(BaseModel):
    post: Post


class Parameter1(BaseModel):
    in_: str = Field(..., alias="in")
    name: str
    description: str
    required: bool
    schema_: Schema = Field(..., alias="schema")


class Field405(BaseModel):
    description: str


class Responses1(BaseModel):
    field_405: Field405 = Field(..., alias="405")


class Post1(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter1]
    responses: Responses1
    security: List[SecurityItem]


Parameter2 = Parameter1


Field400 = Field405


Field404 = Field405


class Responses2(BaseModel):
    field_400: Field400 = Field(..., alias="400")
    field_404: Field404 = Field(..., alias="404")
    field_405: Field405 = Field(..., alias="405")


class Put(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter2]
    responses: Responses2
    security: List[SecurityItem]


class FieldPet(BaseModel):
    post: Post1
    put: Put


class Items(BaseModel):
    type: str
    enum: List[str]
    default: str


class Parameter3(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    items: Items
    collection_format: str = Field(..., alias="collectionFormat")


Items1 = Schema


class Schema3(BaseModel):
    type: str
    items: Items1


class Field2001(BaseModel):
    description: str
    schema_: Schema3 = Field(..., alias="schema")


class Responses3(BaseModel):
    field_200: Field2001 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")


class Get(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter3]
    responses: Responses3
    security: List[SecurityItem]


class FieldPetFindByStatus(BaseModel):
    get: Get


class Items2(BaseModel):
    type: str


class Parameter4(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    items: Items2
    collection_format: str = Field(..., alias="collectionFormat")


Items3 = Schema


class Schema4(BaseModel):
    type: str
    items: Items3


class Field2002(BaseModel):
    description: str
    schema_: Schema4 = Field(..., alias="schema")


class Responses4(BaseModel):
    field_200: Field2002 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")


class Get1(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter4]
    responses: Responses4
    security: List[SecurityItem]
    deprecated: bool


class FieldPetFindByTags(BaseModel):
    get: Get1


class Parameter5(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    format: str


Schema5 = Schema


class Field2003(BaseModel):
    description: str
    schema_: Schema5 = Field(..., alias="schema")


class Responses5(BaseModel):
    field_200: Field2003 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")
    field_404: Field404 = Field(..., alias="404")


class SecurityItem5(BaseModel):
    api_key: List


class Get2(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter5]
    responses: Responses5
    security: List[SecurityItem5]


Parameter6 = Parameter


Responses6 = Responses1


SecurityItem6 = SecurityItem


class Post2(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter6]
    responses: Responses6
    security: List[SecurityItem6]


class Parameter7(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str
    description: Optional[str] = None
    format: Optional[str] = None


class Responses7(BaseModel):
    field_400: Field400 = Field(..., alias="400")
    field_404: Field404 = Field(..., alias="404")


class Delete(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter7]
    responses: Responses7
    security: List[SecurityItem6]


class FieldPetPetId(BaseModel):
    get: Get2
    post: Post2
    delete: Delete


class AdditionalProperties(BaseModel):
    type: str
    format: str


class Schema6(BaseModel):
    type: str
    additional_properties: AdditionalProperties = Field(
        ..., alias="additionalProperties"
    )


class Field2004(BaseModel):
    description: str
    schema_: Schema6 = Field(..., alias="schema")


class Responses8(BaseModel):
    field_200: Field2004 = Field(..., alias="200")


SecurityItem8 = SecurityItem5


class Get3(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List
    responses: Responses8
    security: List[SecurityItem8]


class FieldStoreInventory(BaseModel):
    get: Get3


Schema7 = Schema


class Parameter8(BaseModel):
    in_: str = Field(..., alias="in")
    name: str
    description: str
    required: bool
    schema_: Schema7 = Field(..., alias="schema")


class Field2005(BaseModel):
    description: str
    schema_: Schema7 = Field(..., alias="schema")


class Responses9(BaseModel):
    field_200: Field2005 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")


class Post3(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter8]
    responses: Responses9


class FieldStoreOrder(BaseModel):
    post: Post3


class Parameter9(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    maximum: int
    minimum: int
    format: str


Field2006 = Field2005


class Responses10(BaseModel):
    field_200: Field2006 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")
    field_404: Field404 = Field(..., alias="404")


class Get4(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter9]
    responses: Responses10


class Parameter10(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    minimum: int
    format: str


Responses11 = Responses7


class Delete1(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter10]
    responses: Responses11


class FieldStoreOrderOrderId(BaseModel):
    get: Get4
    delete: Delete1


Schema10 = Schema4


class Parameter11(BaseModel):
    in_: str = Field(..., alias="in")
    name: str
    description: str
    required: bool
    schema_: Schema10 = Field(..., alias="schema")


Default = Field405


class Responses12(BaseModel):
    default: Default


class Post4(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter11]
    responses: Responses12


class FieldUserCreateWithList(BaseModel):
    post: Post4


class Parameter12(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


Schema11 = Schema


class Field2007(BaseModel):
    description: str
    schema_: Schema11 = Field(..., alias="schema")


class Responses13(BaseModel):
    field_200: Field2007 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")
    field_404: Field404 = Field(..., alias="404")


class Get5(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter12]
    responses: Responses13


class Parameter13(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: Optional[str] = None
    schema_: Optional[Schema11] = Field(None, alias="schema")


Responses14 = Responses7


class Put1(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter13]
    responses: Responses14


Parameter14 = Parameter12


Responses15 = Responses7


class Delete2(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter14]
    responses: Responses15


class FieldUserUsername(BaseModel):
    get: Get5
    put: Put1
    delete: Delete2


class XExpiresAfter(BaseModel):
    type: str
    format: str
    description: str


XRateLimit = XExpiresAfter


class Headers(BaseModel):
    x_expires_after: XExpiresAfter = Field(..., alias="X-Expires-After")
    x_rate_limit: XRateLimit = Field(..., alias="X-Rate-Limit")


Schema13 = Items2


class Field2008(BaseModel):
    description: str
    headers: Headers
    schema_: Schema13 = Field(..., alias="schema")


class Responses16(BaseModel):
    field_200: Field2008 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")


class Get6(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter14]
    responses: Responses16


class FieldUserLogin(BaseModel):
    get: Get6


Responses17 = Responses12


class Get7(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List
    responses: Responses17


class FieldUserLogout(BaseModel):
    get: Get7


Schema14 = Schema4


class Parameter16(BaseModel):
    in_: str = Field(..., alias="in")
    name: str
    description: str
    required: bool
    schema_: Schema14 = Field(..., alias="schema")


Responses18 = Responses12


class Post5(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter16]
    responses: Responses18


class FieldUserCreateWithArray(BaseModel):
    post: Post5


Schema15 = Schema


class Parameter17(BaseModel):
    in_: str = Field(..., alias="in")
    name: str
    description: str
    required: bool
    schema_: Schema15 = Field(..., alias="schema")


Responses19 = Responses12


class Post6(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter17]
    responses: Responses19


class FieldUser(BaseModel):
    post: Post6


class Paths(BaseModel):
    field_pet__pet_id__upload_image: FieldPetPetIdUploadImage = Field(
        ..., alias="/pet/{petId}/uploadImage"
    )
    field_pet: FieldPet = Field(..., alias="/pet")
    field_pet_find_by_status: FieldPetFindByStatus = Field(
        ..., alias="/pet/findByStatus"
    )
    field_pet_find_by_tags: FieldPetFindByTags = Field(..., alias="/pet/findByTags")
    field_pet__pet_id_: FieldPetPetId = Field(..., alias="/pet/{petId}")
    field_store_inventory: FieldStoreInventory = Field(..., alias="/store/inventory")
    field_store_order: FieldStoreOrder = Field(..., alias="/store/order")
    field_store_order__order_id_: FieldStoreOrderOrderId = Field(
        ..., alias="/store/order/{orderId}"
    )
    field_user_create_with_list: FieldUserCreateWithList = Field(
        ..., alias="/user/createWithList"
    )
    field_user__username_: FieldUserUsername = Field(..., alias="/user/{username}")
    field_user_login: FieldUserLogin = Field(..., alias="/user/login")
    field_user_logout: FieldUserLogout = Field(..., alias="/user/logout")
    field_user_create_with_array: FieldUserCreateWithArray = Field(
        ..., alias="/user/createWithArray"
    )
    field_user: FieldUser = Field(..., alias="/user")


class ApiKey(BaseModel):
    type: str
    name: str
    in_: str = Field(..., alias="in")


class Scopes(BaseModel):
    read_pets: str = Field(..., alias="read:pets")
    write_pets: str = Field(..., alias="write:pets")


class PetstoreAuth(BaseModel):
    type: str
    authorization_url: str = Field(..., alias="authorizationUrl")
    flow: str
    scopes: Scopes


class SecurityDefinitions(BaseModel):
    api_key: ApiKey
    petstore_auth: PetstoreAuth


Code = AdditionalProperties


Type = Items2


Message = Items2


class Properties(BaseModel):
    code: Code
    type: Type
    message: Message


class ApiResponse(BaseModel):
    type: str
    properties: Properties


Id = AdditionalProperties


Name = Items2


class Properties1(BaseModel):
    id: Id
    name: Name


class Xml(BaseModel):
    name: str


class Category(BaseModel):
    type: str
    properties: Properties1
    xml: Xml


Category1 = Schema


class Name1(BaseModel):
    type: str
    example: str


class Xml1(BaseModel):
    wrapped: bool


Xml2 = Xml


class Items6(BaseModel):
    type: str
    xml: Xml2


class PhotoUrls(BaseModel):
    type: str
    xml: Xml1
    items: Items6


Xml3 = Xml1


Xml4 = Xml


class Items7(BaseModel):
    xml: Xml4
    field_ref: str = Field(..., alias="$ref")


class Tags(BaseModel):
    type: str
    xml: Xml3
    items: Items7


class Status(BaseModel):
    type: str
    description: str
    enum: List[str]


class Properties2(BaseModel):
    id: Id
    category: Category1
    name: Name1
    photo_urls: PhotoUrls = Field(..., alias="photoUrls")
    tags: Tags
    status: Status


class Pet(BaseModel):
    type: str
    required: List[str]
    properties: Properties2
    xml: Xml4


Name2 = Items2


class Properties3(BaseModel):
    id: Id
    name: Name2


class Tag1(BaseModel):
    type: str
    properties: Properties3
    xml: Xml4


PetId = AdditionalProperties


Quantity = AdditionalProperties


ShipDate = AdditionalProperties


Complete = Items2


class Properties4(BaseModel):
    id: Id
    pet_id: PetId = Field(..., alias="petId")
    quantity: Quantity
    ship_date: ShipDate = Field(..., alias="shipDate")
    status: Status
    complete: Complete


class Order(BaseModel):
    type: str
    properties: Properties4
    xml: Xml4


Username = Items2


FirstName = Items2


LastName = Items2


Email = Items2


Password = Items2


Phone = Items2


UserStatus = XExpiresAfter


class Properties5(BaseModel):
    id: Id
    username: Username
    first_name: FirstName = Field(..., alias="firstName")
    last_name: LastName = Field(..., alias="lastName")
    email: Email
    password: Password
    phone: Phone
    user_status: UserStatus = Field(..., alias="userStatus")


class User(BaseModel):
    type: str
    properties: Properties5
    xml: Xml4


class Definitions(BaseModel):
    api_response: ApiResponse = Field(..., alias="ApiResponse")
    category: Category = Field(..., alias="Category")
    pet: Pet = Field(..., alias="Pet")
    tag: Tag1 = Field(..., alias="Tag")
    order: Order = Field(..., alias="Order")
    user: User = Field(..., alias="User")


class Components(BaseModel):
    schemas: Dict[str, Any]


class Model(BaseModel):
    swagger: str
    info: Info
    host: str
    base_path: str = Field(..., alias="basePath")
    tags: List[Tag]
    schemes: List[str]
    paths: Paths
    security_definitions: SecurityDefinitions = Field(..., alias="securityDefinitions")
    definitions: Definitions
    external_docs: ExternalDocs = Field(..., alias="externalDocs")
    components: Components
