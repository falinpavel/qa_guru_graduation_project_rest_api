"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: {{ service_name|to_snake_case }}
    version: {{ version }}

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Parameter(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    description: str
    type: str


class Field401(BaseModel):
    description: str


Field200 = Field401


class Responses(BaseModel):
    field_401: Field401 = Field(..., alias="401")
    field_200: Field200 = Field(..., alias="200")


class Get(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List[Parameter]
    responses: Responses


class Schema(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Parameter1(BaseModel):
    in_: str = Field(..., alias="in")
    name: str
    description: str
    required: bool
    schema_: Schema = Field(..., alias="schema")


Field400 = Field401


Field500 = Field401


class Responses1(BaseModel):
    field_200: Field200 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")
    field_500: Field500 = Field(..., alias="500")


class Post(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter1]
    responses: Responses1


class FieldLogin(BaseModel):
    get: Get
    post: Post


Parameter2 = Parameter


class Responses2(BaseModel):
    field_200: Field200 = Field(..., alias="200")
    field_401: Field401 = Field(..., alias="401")
    field_500: Field500 = Field(..., alias="500")


class Get1(BaseModel):
    tags: List[str]
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    description: str
    parameters: List[Parameter2]
    responses: Responses2


class FieldAccount(BaseModel):
    get: Get1


Responses3 = Responses2


class Get2(BaseModel):
    tags: List[str]
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    description: str
    parameters: List[Parameter2]
    responses: Responses3


class FieldAccountAccountNo(BaseModel):
    get: Get2


Responses4 = Responses2


class Get3(BaseModel):
    tags: List[str]
    operation_id: str = Field(..., alias="operationId")
    description: str
    produces: List[str]
    parameters: List[Parameter2]
    responses: Responses4


class Parameter5(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    description: str
    type: Optional[str] = None
    schema_: Optional[Schema] = Field(None, alias="schema")


Field501 = Field401


class Responses5(BaseModel):
    field_200: Field200 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")
    field_401: Field401 = Field(..., alias="401")
    field_501: Field501 = Field(..., alias="501")


class Post1(BaseModel):
    tags: List[str]
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter5]
    responses: Responses5


class FieldAccountAccountNoTransactions(BaseModel):
    get: Get3
    post: Post1


Parameter6 = Parameter5


class Responses6(BaseModel):
    field_200: Field200 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")
    field_501: Field501 = Field(..., alias="501")


class Post2(BaseModel):
    tags: List[str]
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter6]
    responses: Responses6


class FieldTransfer(BaseModel):
    post: Post2


Responses7 = Responses2


Parameter7 = Parameter1


class Post3(BaseModel):
    tags: List[str]
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    responses: Responses7
    parameters: List[Parameter7]


class FieldFeedbackSubmit(BaseModel):
    post: Post3


class Responses8(BaseModel):
    field_200: Field200 = Field(..., alias="200")
    field_400: Field400 = Field(..., alias="400")
    field_401: Field401 = Field(..., alias="401")
    field_500: Field500 = Field(..., alias="500")


class Parameter8(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    description: Optional[str] = None
    type: str


class Get4(BaseModel):
    tags: List[str]
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    responses: Responses8
    parameters: List[Parameter8]


class FieldFeedbackFeedbackId(BaseModel):
    get: Get4


Responses9 = Responses8


Parameter9 = Parameter5


class Post4(BaseModel):
    tags: List[str]
    description: str
    operation_id: str = Field(..., alias="operationId")
    consumes: List[str]
    produces: List[str]
    responses: Responses9
    parameters: List[Parameter9]


class FieldAdminAddUser(BaseModel):
    post: Post4


Responses10 = Responses8


Parameter10 = Parameter5


class Post5(BaseModel):
    tags: List[str]
    description: str
    consumes: List[str]
    produces: List[str]
    operation_id: str = Field(..., alias="operationId")
    responses: Responses10
    parameters: List[Parameter10]


class FieldAdminChangePassword(BaseModel):
    post: Post5


class Responses11(BaseModel):
    field_200: Field200 = Field(..., alias="200")
    field_500: Field500 = Field(..., alias="500")


class Get5(BaseModel):
    tags: List[str]
    description: str
    operation_id: str = Field(..., alias="operationId")
    produces: List[str]
    parameters: List
    responses: Responses11


class FieldLogout(BaseModel):
    get: Get5


class Paths(BaseModel):
    field_login: FieldLogin = Field(..., alias="/login")
    field_account: FieldAccount = Field(..., alias="/account")
    field_account__account_no_: FieldAccountAccountNo = Field(
        ..., alias="/account/{accountNo}"
    )
    field_account__account_no__transactions: FieldAccountAccountNoTransactions = Field(
        ..., alias="/account/{accountNo}/transactions"
    )
    field_transfer: FieldTransfer = Field(..., alias="/transfer")
    field_feedback_submit: FieldFeedbackSubmit = Field(..., alias="/feedback/submit")
    field_feedback__feedback_id_: FieldFeedbackFeedbackId = Field(
        ..., alias="/feedback/{feedbackId}"
    )
    field_admin_add_user: FieldAdminAddUser = Field(..., alias="/admin/addUser")
    field_admin_change_password: FieldAdminChangePassword = Field(
        ..., alias="/admin/changePassword"
    )
    field_logout: FieldLogout = Field(..., alias="/logout")


class Username(BaseModel):
    type: str
    example: str


Password = Username


class Properties(BaseModel):
    username: Username
    password: Password


class Login(BaseModel):
    type: str
    required: List[str]
    properties: Properties


class StartDate(BaseModel):
    type: str
    format: str
    example: str


EndDate = StartDate


class Properties1(BaseModel):
    start_date: StartDate = Field(..., alias="startDate")
    end_date: EndDate = Field(..., alias="endDate")


class Dates(BaseModel):
    type: str
    required: List[str]
    properties: Properties1


ToAccount = Username


FromAccount = Username


TransferAmount = Username


class Properties2(BaseModel):
    to_account: ToAccount = Field(..., alias="toAccount")
    from_account: FromAccount = Field(..., alias="fromAccount")
    transfer_amount: TransferAmount = Field(..., alias="transferAmount")


class Transfer(BaseModel):
    type: str
    required: List[str]
    properties: Properties2


Name = Username


Email = StartDate


Subject = Username


Message = Username


class Properties3(BaseModel):
    name: Name
    email: Email
    subject: Subject
    message: Message


class Feedback(BaseModel):
    type: str
    required: List[str]
    properties: Properties3


Firstname = Username


Lastname = Username


class Username1(BaseModel):
    type: str
    example: str
    unique_items: bool = Field(..., alias="uniqueItems")


Password1 = StartDate


Password2 = StartDate


class Properties4(BaseModel):
    firstname: Firstname
    lastname: Lastname
    username: Username1
    password1: Password1
    password2: Password2


class NewUser(BaseModel):
    type: str
    required: List[str]
    properties: Properties4


Username2 = Username


class Properties5(BaseModel):
    username: Username2
    password1: Password1
    password2: Password2


class ChangePassword(BaseModel):
    type: str
    required: List[str]
    properties: Properties5


class Definitions(BaseModel):
    login: Login
    dates: Dates
    transfer: Transfer
    feedback: Feedback
    new_user: NewUser = Field(..., alias="newUser")
    change_password: ChangePassword = Field(..., alias="changePassword")


class Info(BaseModel):
    title: str
    version: str


class Tag(BaseModel):
    name: str
    description: str


class Components(BaseModel):
    schemas: Dict[str, Any]


class Model(BaseModel):
    base_path: str = Field(..., alias="basePath")
    paths: Paths
    definitions: Definitions
    swagger: str
    info: Info
    tags: List[Tag]
    components: Components
