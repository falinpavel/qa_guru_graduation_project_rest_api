# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: altoro_j
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from clients.http.altoro_j.models.api_models import (
    Login,
)


class Field1LoginApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def get_login(
        self,
        authorization: Any,
        **kwargs: Any,
    ) -> Response:
        """
                Check if any user is logged in.

                Args:
                    authorization(Any, required): Authorization token (provided upon successful
        login)
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

                Returns:
                    None: ...
        """  # noqa: D205,E501

        response = self.get_login_with_http_info(
            authorization=authorization,
            **kwargs,
        )
        return response

    def get_login_with_http_info(
        self,
        authorization: Any,
        **kwargs: Any,
    ) -> Response:
        """
                Check if any user is logged in.

                Args:
                    authorization(Any, required): Authorization token (provided upon successful
        login)
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

                Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "Authorization": str(authorization),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = self.api_client.get(
            url="/login",
            headers=headers,
            **kwargs,
        )
        return response

    def post_login(
        self,
        login: Login,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Login method.

        Args:
            login(Login): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            None: ...
        """  # noqa: D205,E501

        response = self.post_login_with_http_info(
            login=login,  # noqa: E501
            **kwargs,
        )
        return response

    def post_login_with_http_info(
        self,
        login: Login,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Login method.

        Args:
            login(Login): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = login.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/login",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response
